/**
 * app.js - Main application file for the Express.js backend.
 *
 * This file sets up the Express server, imports necessary middleware and controllers,
 * defines the API routes, and starts the server.
 */

// Import the Express.js library
const express = require('express');

// Create an instance of the Express application
const app = express();

// Define the port the server will listen on
const port = 3000;

// Import the multer middleware for handling file uploads
const multer = require("multer");

// Create an instance of the multer upload middleware
const upload = multer();

// Import the Google Generative AI library
const { GoogleGenerativeAI } = require("@google/generative-ai");

// Import controller functions from their respective modules (assuming they are in the './Service/' directory)
const { createItinerary, getAllItineraries } = require('./Service/ItineraryController');
const { getAllBlogs, createNewBlog, deleteBlog } = require('./Service/BlogController');
const { handleLogin, handleRegister, handleLogout } = require('./Service/AuthService');
const { updateTrip, createTrip } = require('./Service/TripController');
const { uploadImage } = require('./Service/ImageController');

// Initialize the Google Generative AI client with your API key
const genAI = new GoogleGenerativeAI("AIzaSyDFQXhPWPhPiMumcCykcnx3XnxiRggpx_Q");

/**
 * Helper function to convert a file buffer and MIME type into a Google Generative AI compatible part.
 * @param {Buffer} data - The file buffer.
 * @param {string} mimeType - The MIME type of the file.
 * @returns {object} - An object representing the file data in the required format.
 */
function fileToGenerativePart(data, mimeType) {
    return {
        inlineData: {
            data: data.toString('base64'),
            mimeType,
        },
    };
}

/**
 * API route for managing itineraries.
 * - POST /api/itineraries: Creates a new itinerary (handled by the createItinerary controller).
 * - GET /api/itineraries: Retrieves all itineraries (handled by the getAllItineraries controller).
 */
app.route('/api/itineraries')
    .post(createItinerary)
    .get(getAllItineraries);

/**
 * API route for managing blogs.
 * - GET /api/blogs/blog: Retrieves all blogs (handled by the getAllBlogs controller).
 * - POST /api/blogs/blog: Creates a new blog (handled by the createNewBlog controller).
 * - DELETE /api/blogs/blog: Deletes a blog (handled by the deleteBlog controller).
 */
app.route('/api/blogs/blog')
    .get(getAllBlogs)
    .post(createNewBlog)
    .delete(deleteBlog);

/**
 * API routes for user authentication.
 * - POST /api/auth/login: Handles user login (handled by the handleLogin controller).
 * - POST /api/auth/register: Handles user registration (handled by the handleRegister controller).
 * - POST /api/auth/logout: Handles user logout (commented out in this version).
 */
app.post('/api/auth/login', handleLogin);
app.post('/api/auth/register', handleRegister);
// app.post('/api/auth/logout', handleLogout);

/**
 * API route for describing an image using Google Gemini.
 * - POST /api/gemini-describe: Accepts a single image file and returns a text description generated by the Gemini model.
 * Uses multer middleware to handle the file upload.
 */
app.route('/api/gemini-describe')
    // Handle POST requests for image description
    .post(upload.single("file"), async (req, res) => {
        const imageFile = req.file;
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
        const image = [fileToGenerativePart(imageFile.buffer, imageFile.mimetype)];

        const result = await model.generateContent(["describe the image ", ...image]);
        const response = await result.response;
        const text = response.text();

        console.log('Generated text:', text);

        res.json({ result: text });
    });

/**
 * API route for creating a new trip.
 * - POST /api/trips: Accepts user email and name in the request body and initiates the trip creation process
 * (handled by the createTrip controller). Sends a success response.
 */
app.route('/api/trips')
    .post((req, res) => {
        const { email, name } = req.body;
        createTrip(email, name);
        res.status(200).send('Trip creation initiated'); // Send a success response
    });

/**
 * API route for uploading an image.
 * - POST /api/upload-image: Accepts a single image file and uploads it (handled by the uploadImage controller).
 * Uses multer middleware to handle the file upload.
 */
app.route('/api/upload-image')
    .post(upload.single("file"), uploadImage);

/**
 * Basic route for the root path.
 * - GET /: Returns a simple "Hello World!" message.
 */
app.get('/', (req, res) => {
    res.send('Hello World!');
});

/**
 * Start the Express server and listen for incoming requests on the specified port.
 * The callback function logs a message to the console indicating that the server is running.
 */
app.listen(port, () => {
    console.log(`Server listening on port ${port}`);
});